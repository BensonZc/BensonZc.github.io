<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[BensonZc'Blog]]></title>
  <subtitle><![CDATA[拥有满满的情怀和数码周边的码农]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://bensonzc.github.io/"/>
  <updated>2016-02-25T10:06:19.676Z</updated>
  <id>http://bensonzc.github.io/</id>
  
  <author>
    <name><![CDATA[BensonZc]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[高并发数据库锁（乐观锁，悲观锁）]]></title>
    <link href="http://bensonzc.github.io/2016/02/25/high-concurrency-db-lock/"/>
    <id>http://bensonzc.github.io/2016/02/25/high-concurrency-db-lock/</id>
    <published>2016-02-25T08:19:34.000Z</published>
    <updated>2016-02-25T10:06:19.676Z</updated>
    <content type="html"><![CDATA[<p>工作中项目碰到高并发下各种脏数据，“被迫研究”了下数据库锁。<br>从数据库层面来讲，最典型的就是<strong>悲观锁</strong>和<strong>乐观锁了</strong></p>
<h3 id="u60B2_u89C2_u9501_uFF08Pessimisttic_Locking_uFF09"><a href="#u60B2_u89C2_u9501_uFF08Pessimisttic_Locking_uFF09" class="headerlink" title="悲观锁（Pessimisttic Locking）"></a>悲观锁（Pessimisttic Locking）</h3><p>悲观锁，指的是数据在整个处理过程中（包括本系统当前的其他事务，以及来自外部系统的事务处理），将数据处于锁定的状态。悲观锁的实现，一般依靠数据库提供的锁机制（也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使本系统中实现了加锁，也无法保证外部系统不会修改数据）。<br><code>select * from table where column = “test” for update</code>这句sql锁定了table表中所有column为test的数据。本次事务提交之前，外界无法修改这些数据。<br>数据锁定时，其他线程或事务进行更新操作时，会等待锁释放后才能获取到数据。<strong>不加锁的查询</strong>操作不影响。</p>
<p><img src="/2016/02/25/high-concurrency-db-lock/hcdl-1.png" alt=""><br><img src="/2016/02/25/high-concurrency-db-lock/hcdl-2.png" alt=""></p>
<p>LockOptions是LockMode的简单封装，在LockMode的基础上提供了timeout（是否等待锁释放）和scope（是否锁关联数据）。<code>JDK在注释中推荐使用LockOptions加锁，本人试过用LockMode加锁，有部分锁发现没有效果。具体原因查过，未知。但是不妨碍日常使用。</code>其中LockMode.UPGRADE_NOWAIT，Oracle特定实现，NOWAITT表明如果执行该select语句的事务不能立即获得悲观锁,那么不会等待其它事务释放锁,而是立刻抛出锁定异常</p>
<p><strong>只有在查询开始之前（Hibernate生成sql之前）设定加锁，才会通过数据库的锁机制进行加锁。</strong></p>
<h3 id="u4E50_u89C2_u9501_uFF08Optimistic_Locking_uFF09"><a href="#u4E50_u89C2_u9501_uFF08Optimistic_Locking_uFF09" class="headerlink" title="乐观锁（Optimistic Locking）"></a>乐观锁（Optimistic Locking）</h3><p>悲观锁依靠数据库的锁机制实现，保证操作的独占性。但带来了数据库性能的大量开销，特别是长事务。乐观锁解决了这个问题，乐观锁基于数据版本（Version）记录机制实现。即在表中增加字段version，更新数据的时候对version加一，提交数据时，与数据库表中的version比对，如果提交的数据version大于数据库表中的version则更新成功。反之抛出异常。</p>
<p><strong>Hibernate集成了乐观锁</strong><br>加锁的表新增字段version用于数据版本控制。支持以下类型<br><img src="/2016/02/25/high-concurrency-db-lock/hcdl-3.png" alt=""><br>用@Version注解<br><img src="/2016/02/25/high-concurrency-db-lock/hcdl-4.png" alt=""><br>创建数据的时候。version会默认为0，更新数据的时候version会自动加一，若并发导致数据不同步，更新数据version小于等于数据库表version会抛出异常<br><img src="/2016/02/25/high-concurrency-db-lock/hcdl-5.png" alt=""><br>提示当前事务已被更新或删除了</p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>悲观锁和乐观锁都有适用的场景，悲观锁很好的保持了数据的一致性，但是如果多个线程或事务并发，可能造成无限期等待。而乐观锁解决了这个问题，同时速度快，耗费性能低，只是多查了个字段，但是如果数据库是直接对外公开的话，外部是不受控制的，这时候就会产生脏数据。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>工作中项目碰到高并发下各种脏数据，“被迫研究”了下数据库锁。<br>从数据库层面来讲，最典型的就是<strong>悲观锁</strong>和<strong>乐观锁了</strong></p>
<h3 id="u60B2_u89C2_u9501_uFF08Pessimistt]]>
    </summary>
    
      <category term="hibernate" scheme="http://bensonzc.github.io/tags/hibernate/"/>
    
      <category term="java" scheme="http://bensonzc.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hibernate.initialize()]]></title>
    <link href="http://bensonzc.github.io/2016/02/23/hibernate-initialize/"/>
    <id>http://bensonzc.github.io/2016/02/23/hibernate-initialize/</id>
    <published>2016-02-23T08:24:52.000Z</published>
    <updated>2016-02-23T08:33:28.139Z</updated>
    <content type="html"><![CDATA[<p>使用hibernate进行持久化时，有时需要动态的改变对象的加载方式。配置中lazy属性是全局控制的。这时候需要Hibernate.initialize()。</p>
<p>###lazy加载</p>
<p>当元素lazy属性为true时，load(),get(),find()加载对象时，不会马上产生select。只是产生一个Obj代理类实例。lazy为false时，则会马上执行select来加载对象。</p>
<p>只有在session没有关闭的情况下Obj.getXXX()时会执行select语句从数据库加载对象，如果没有调用Obj.getXXX()方法，而session已经关闭，Obj成游离状态。这时候再调用Obj.getXXX()方法，Hibernate会抛出<code>Could not initialize proxy - the owning Session was closeed</code>的异常。Obj代理类实例无法被初始化。想在这种情况下调用到对象。只要在session关闭前调用Hibernate.initialize(Obj obj)静态方法，初始化代理类实例。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用hibernate进行持久化时，有时需要动态的改变对象的加载方式。配置中lazy属性是全局控制的。这时候需要Hibernate.initialize()。</p>
<p>###lazy加载</p>
<p>当元素lazy属性为true时，load(),get(),find]]>
    </summary>
    
      <category term="hibernate" scheme="http://bensonzc.github.io/tags/hibernate/"/>
    
      <category term="java" scheme="http://bensonzc.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[java线程池整理]]></title>
    <link href="http://bensonzc.github.io/2016/02/14/thread-pool-summary/"/>
    <id>http://bensonzc.github.io/2016/02/14/thread-pool-summary/</id>
    <published>2016-02-14T06:08:32.000Z</published>
    <updated>2016-02-17T02:03:17.598Z</updated>
    <content type="html"><![CDATA[<p>年假前，闲来无事。对线程池的理解不是很系统，就索性稍微整理了下。</p>
<h2 id="1-__u7EBF_u7A0B_u6C60_u4F5C_u7528"><a href="#1-__u7EBF_u7A0B_u6C60_u4F5C_u7528" class="headerlink" title="1. 线程池作用"></a>1. 线程池作用</h2><p>线程池作用就是限制系统中执行线程的数量。根据系统的环境情况，可以自动或手动设置线程数量，合理利用资源，达到最佳效果。线程池减少了创建和销毁线程的次数，每个工作线程可以被重复利用，执行多个任务。同时根据系统的承受能力，调整线程池中工作线程的数目。</p>
<h2 id="2-__u7EBF_u7A0B_u6C60_u7C7B_u89E3_u6790"><a href="#2-__u7EBF_u7A0B_u6C60_u7C7B_u89E3_u6790" class="headerlink" title="2. 线程池类解析"></a>2. 线程池类解析</h2><ul>
<li><code>ExecutorService</code> 真正的线程池接口</li>
<li><code>ScheduledExecutorService</code> 和Timer/TimerTask类似，解决那些需要任务重复执行的问题</li>
<li><code>ThreadPoolExecutor</code> ExecutorService的默认实现。</li>
<li><code>ScheduledThreadPoolExecutor</code> 继承ThreadPoolExecutor和ScheduledExecutorService接口实现，周期性任务调度的类实现。</li>
</ul>
<p>配置一个线程池比较复杂，尤其是原理不清楚的情况下。这样配出来的线程池效果可能不是最优的，因此Executors类里面提供了一些惊呆工厂，生成一些常用的线程池。</p>
<h2 id="3-__u5E38_u7528_u7684_u51E0_u4E2A_u7EBF_u7A0B_u6C60"><a href="#3-__u5E38_u7528_u7684_u51E0_u4E2A_u7EBF_u7A0B_u6C60" class="headerlink" title="3. 常用的几个线程池"></a>3. 常用的几个线程池</h2><ul>
<li><code>newSingleThreadExecutor</code>:创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。如果线程出现异常结束，就会创建个新线程来代替。此线程池保证了所有任务按任务提交顺序执行。</li>
<li><code>newFixedThreadPool</code>:创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程数达到线程池最大线程数。线程池的大小一旦叨叨最大值就会保持不变。</li>
<li><code>newCachedThreadPool</code>:创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程，会回收部分空闲线程，当任务数增加时，线程池又会智能的添加新线程来处理任务。线程池大小依赖于JVM能够创建的最大线程大小。</li>
<li><code>newScheduleddThreadPool</code>:创建一个大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。</li>
</ul>
<h2 id="4-_ThreadPoolExecutor_u8BE6_u89E3"><a href="#4-_ThreadPoolExecutor_u8BE6_u89E3" class="headerlink" title="4. ThreadPoolExecutor详解"></a>4. ThreadPoolExecutor详解</h2><h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a><code>ThreadPoolExecutor</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                          <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                          <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                          TimeUnit unit,</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                          ThreadFactory threadFactory,</span><br><span class="line">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ThreadPoolExecutor构造函数，简单解释下几个参数的意义<br><code>corePoolSize</code> - 池中保存的线程数<br><code>maximumPoolSize</code> - 池中最大线程数<br><code>keepAliveTime</code> - 线程数大于<code>corePoolSize</code>时，终止多余的空闲线程的最大时间<br><code>unit</code> - <code>keeyAliveTime</code>参数的时间单位<br><code>workQuene</code> - 保持任务的队列，仅保持由execute提交的Runnable任务<br><code>threadFactory</code> - 创建新线程时使用的工厂<br><code>handler</code> - 由于超出线程范围和队列容量而使执行被阻塞时锁使用的处理程序</p>
<h3 id="u5E38_u7528_u7684_u7EBF_u7A0B_u6C60_u6784_u9020_u5DE5_u5382"><a href="#u5E38_u7528_u7684_u7EBF_u7A0B_u6C60_u6784_u9020_u5DE5_u5382" class="headerlink" title="常用的线程池构造工厂"></a>常用的线程池构造工厂</h3><p>jdk中有这么一段注释<br><img src="/2016/02/14/thread-pool-summary/tps-1.png" alt=""><br>所以简单介绍下JDK推荐的构造线程池的方法</p>
<ol>
<li><p>newFixedThreadPool()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个corePoolSize和maximumPoolSize的大小一样，且不使用keep alive和LinkedBlockingQueue&lt;Runnable&gt;的线程池。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>newSingleThreadExecutor()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和newFixedThreadPool()类似，corePoolSize和maximumPoolSize的值都为1的线程池</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService   </span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,   </span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,   </span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>newCachedThreadPool()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个maximumPoolSize为Integer.MAX_VALUE，任务队列为SynchronousQueue的线程池。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,   </span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,   </span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>PS: 所有的BlockingQueue都可用于传输和保持提交的任务。（SynchronousQueue将任务直接提交给线程而不保持任务，如果不存在可用线程，则任务加入队列会失败，此队列可以避免在处理可能具有内部依赖性的请求集时出现锁。所以通常要求<code>maximumPoolSize</code>为无界来避免新任务提交到线程失败。LinkedBlockingQueue在线程数达到<code>corePoolSize</code>时，任务在队列中等待。创建的线程数不会超过<code>corePoolSize</code>，因此<code>maximumPoolSize</code>值就无效。当任务之间互相独立，互不影响适用无界队列）这个队列与线程池进行交互：</p>
<ul>
<li>如果运行的线程少于<code>corePoolSize</code>，则线程池始终会创建新线程执行任务，而不会进入队列。    </li>
<li>如果运行的线程等于或大于<code>corePoolSize</code>且小于<code>maximumPoolSize</code>，线程池会请求加入队列，而不是创建新线程。</li>
<li>如果运行线程大于<code>maximumPoolSize</code>，这种情况下，任务会被拒绝。</li>
</ul>
<h2 id="u5B9E_u4F8B"><a href="#u5B9E_u4F8B" class="headerlink" title="实例"></a>实例</h2><p>简单的按自己的理解封装了下线程池，详情看<a href="https://github.com/BensonZc/ThreadPoolDemo" target="_blank" rel="external">Demo</a>。欢迎批评指导！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>年假前，闲来无事。对线程池的理解不是很系统，就索性稍微整理了下。</p>
<h2 id="1-__u7EBF_u7A0B_u6C60_u4F5C_u7528"><a href="#1-__u7EBF_u7A0B_u6C60_u4F5C_u7528" class="heade]]>
    </summary>
    
      <category term="java" scheme="http://bensonzc.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015总结]]></title>
    <link href="http://bensonzc.github.io/2016/02/06/2015-summarize/"/>
    <id>http://bensonzc.github.io/2016/02/06/2015-summarize/</id>
    <published>2016-02-06T01:36:52.000Z</published>
    <updated>2016-02-14T06:40:29.515Z</updated>
    <content type="html"><![CDATA[<p>今天还要上班的朋友们，让我看到你们的双手…..<br>按照惯例，今天上半天班。早上肯定没心思干活了。闲来无事就给2015做个总结？</p>
<p>2015年干了不少事，除了钱，其他方面收获颇丰。最大的收获是一个人的快活变成了两个人的生活——-结婚了。和老婆从大二在一起到毕业2年左右结婚，也算功德圆满。虽然没有小情侣那样的如胶似漆，但是生活本该平淡恬静。偶尔想起大学到毕业到工作到结婚，其中的每件事现在回想起来都会把自己逗乐。不得不承认，学生时代的爱情是最真实的。没有社会物质的介入，只看脸……</p>
<p>为了婚礼能在年底如期进行，老家的房子装修紧锣密鼓的。本想大展拳脚，最后不了了之。跟父母辈的审美鸿沟实在逾越不过去。不过也算切身的体验了一下装修，也算入了个门。后面为了工作方便，和老婆的小屋装修过程中尽量亲力亲为，拿个纸笔就开始干设计。虽然最后总有些不尽如人意的地方，但是整体大方向还是把握住了。算在装修领域正式入门了，跟同龄的同学同事聊起来，也算半个老司机了，忽悠起来不在话下。也算自成一派，跑各种建材厂挑选各种材料，研究各种家用电器的适用场景。勉强能帮到一些同学朋友。欢迎一起探讨。</p>
<p>结婚免不了蜜月，因为穷，只能国内游。最后选了台湾，老婆全权负责旅行安排和房间机票订购。先是直飞高雄，入住有吾客栈（是一个从失望，满意，惊喜，到不舍的民宿）当天晚上就直奔瑞丰夜市，我一直觉得旅游就是个吃。一晚上都是烤炸的小吃加古早味红茶。第二天租个小电动车，晃悠在西子湾和旗津岛。晚上到市中心体验了下台湾的自助。第三天拼了个的士到垦丁，本人城市就靠海。所以到垦丁对看海没多大兴趣，但是骑租来的摩托然后被海风吹得噼里啪啦得感觉还是不错的，顺带赞下后壁湖的海鲜，真的是鲜且便宜。折合20RMB的一盘生鱼片，就问你怕不怕？垦丁呆了一天，第三天就高铁到了台北，进城了。陪老婆逛的是纪念馆啊，博物馆啊。台湾给我留下的印象真的是舒服，人民整体素质的确比较高。和老婆约定下次有机会再来。写博文的今天得知台湾6.7级地震？！高雄好像尤其惨重。从台湾旅游回来后，由于本人也是闽南地区。一直跟老婆戏称高雄是我的故乡，只能心里默默祈祷祝安好！灾难退散！</p>
<p>旅游回来后，就是各种败家，给自己小屋添置各种东西。购买各个部件，尝试了下装机。部了家庭千兆网，搞了家庭NAS。然后就没钱了。后面还想败一堆情怀模型手办。</p>
<p>随意记录了下一年里留下深刻印象的几件事，文笔太差，其他大大小小的事就不记了，心里想着的是—–怎么还不通知提早下班？</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天还要上班的朋友们，让我看到你们的双手…..<br>按照惯例，今天上半天班。早上肯定没心思干活了。闲来无事就给2015做个总结？</p>
<p>2015年干了不少事，除了钱，其他方面收获颇丰。最大的收获是一个人的快活变成了两个人的生活——-结婚了。和老婆从大二在一起到毕业]]>
    </summary>
    
      <category term="生活" scheme="http://bensonzc.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="随记" scheme="http://bensonzc.github.io/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Sonar常见问题整理]]></title>
    <link href="http://bensonzc.github.io/2016/02/05/sonar-problem-list/"/>
    <id>http://bensonzc.github.io/2016/02/05/sonar-problem-list/</id>
    <published>2016-02-05T07:15:21.000Z</published>
    <updated>2016-02-06T01:26:54.516Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.sonarqube.org/" target="_blank" rel="external">Sonar</a>是一个开源平台，用于管理Java源代码的质量。本章知识介绍Sonar检验代码常出现的几个问题：</p>
<ul>
<li><p>安全-直接保存数组：<code>The user-supplied array &#39;xxxx&#39; is stored directly</code><br>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] getXXXXArray()&#123;</span><br><span class="line">	<span class="keyword">return</span> xxxxArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXXXXArray</span><span class="params">(String[] xxxxArray)</span></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.xxxxArray = xxxxArray;</span><br><span class="line">&#125;</span><br><span class="line">===&gt;</span><br><span class="line"><span class="keyword">public</span> String[] getXXXXArray()&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">null</span> != xxxxArray)&#123;</span><br><span class="line">		<span class="keyword">return</span> Arrays.copyOf(xxxxArray, xxxxArray.length);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setXXXXArray</span><span class="params">(String[] xxxxArray)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">null</span> != xxxxArray)&#123;</span><br><span class="line">		<span class="keyword">this</span>.xxxxArray = Arrays.copyOf(xxxxArray, xxxxArray.length);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.xxxxArray = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>覆盖了equals也应该覆盖hashCode：<code>Definition of &#39;equals()&#39; without corresponding definition of &#39;hashCode()</code><br>如果覆盖了equals()方法的话，则必须覆盖hashCode()方法。Object类的equals()方法按照内存地址比较对象是否相等，因此如果object1.equals(object2)为true，表明object1变量和object2变量实际上引用同一个对象，那么object1和object2的哈希吗肯定也肯定也相同，也就是说object1.hashCode()==object2.hashCode()。<br>如果用户定义的类覆盖了Object类的equals()方法，但是没有覆盖Object类的hashCode()方法，就会导致当object1.equals(object2)为true时，object1和object2的哈希吗不一定一样。所以如果覆盖了equals()方法，也应该覆盖hashCode()方法，并且保证2个相等的object对象的哈希码也一样</p>
</li>
<li><p>返回之前不用的本地变量：<code>Consider simply returning the value vs storing it in local variable &#39;xxxx&#39;</code><br>例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">	TestObject testObject = function(param);</span><br><span class="line">	<span class="keyword">return</span> testObject;</span><br><span class="line">&#125;</span><br><span class="line">===&gt;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> function(param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>隐藏属性：<code>&#39;****&#39; hides a field.</code><br>方法中声明的变量和成员属性名发生了重复</p>
</li>
<li><p>简化布尔表达式：<code>Expression can be simplified.</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(xxxx == <span class="keyword">false</span>)</span><br><span class="line">===&gt;</span><br><span class="line"><span class="keyword">if</span>(!xxxx)</span><br></pre></td></tr></table></figure>
</li>
<li><p>进行比较时，比较常量应该放在左边</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(xxxx.equals(<span class="string">"0"</span>))&#123;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br><span class="line">===&gt;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"0"</span>.equals(xxxx))&#123;</span><br><span class="line">	......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>待续……</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.sonarqube.org/" target="_blank" rel="external">Sonar</a>是一个开源平台，用于管理Java源代码的质量。本章知识介绍Sonar检验代码常出现的几个问题：</p>
<ul>
<li>]]>
    </summary>
    
      <category term="code-style" scheme="http://bensonzc.github.io/tags/code-style/"/>
    
      <category term="java" scheme="http://bensonzc.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何部署https项目（tomcat）]]></title>
    <link href="http://bensonzc.github.io/2016/02/05/how-to-deploy-https-project/"/>
    <id>http://bensonzc.github.io/2016/02/05/how-to-deploy-https-project/</id>
    <published>2016-02-05T06:30:50.000Z</published>
    <updated>2016-02-05T07:14:51.718Z</updated>
    <content type="html"><![CDATA[<p>前段时间接了个外包项目，终端IOS要求请求走https。之前https都是某同事在倒腾，没有学习理解过，查了一些资料自己做点总结。</p>
<h2 id="1-__u4F55_u4E3Ahttps"><a href="#1-__u4F55_u4E3Ahttps" class="headerlink" title="1. 何为https"></a>1. 何为https</h2><p>高大上的理论解释网上一搜一打，就不做解释了。这里做最简单最通俗的解释：http的安全版本。通过在http下加入SSL层。一般意义上的https就是在服务器上有一个证书，服务端与客户端之间所有通讯都是加密的。客户端向服务端握个手，初始化下SSL层。这时候客户端和服务端就可以愉快的沟通了。这里主要介绍下复杂的SSL握手。</p>
<h3 id="SSL_u63E1_u624B_uFF08_u5355_u5411_u8BA4_u8BC1_uFF09"><a href="#SSL_u63E1_u624B_uFF08_u5355_u5411_u8BA4_u8BC1_uFF09" class="headerlink" title="SSL握手（单向认证）"></a>SSL握手（单向认证）</h3><ol>
<li>客户端（一般就是浏览器了）向服务端发送自己支持的加密规则。</li>
<li>服务端选择一组加密规则和HASH算法，以及服务端证书发送给浏览器。证书中包括网站地址，加密公钥，以及证书的颁发机构等信息。（SSL支持双向认证，服务端将证书发送给客户端，然后再将客户端的证书回送给服务端。但是实际应用中很多用户都没有自己的客户端证书，因此服务器也很少会要求客户端证书）</li>
<li>浏览器获取到服务端证书后要做一些操作：<ul>
<li>验证证书的合法性（颁发证书的机构是否合法等验证），如果证书合法，则浏览器会显示个小锁头，否则会给出证书不受信的提示。</li>
<li>如果证书受信任，或者用户接受了不受信任的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密。</li>
<li>使用约定好的HASH算法计算握手消息，并使用刚生成的随机数对消息进行加密，最后将之前生成的所有信息发送给服务端。</li>
</ul>
</li>
<li>服务端收到浏览器发来的数据后做如下操作：<ul>
<li>使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手信息，并验证HASH是否与浏览器发来的是否一致。</li>
<li>使用密码加密一段握手消息，发送给浏览器。</li>
</ul>
</li>
<li>浏览器解密并计算握手消息的HASH，如果与服务端发来的HASH一致，此时握手过程结束，之后所有的通信数据都将由之前浏览器生成的随机密码并利用对称加密算法进行加密。</li>
</ol>
<h3 id="u603B_u7ED3_u4E0B_u5C31_u662F_uFF1A"><a href="#u603B_u7ED3_u4E0B_u5C31_u662F_uFF1A" class="headerlink" title="总结下就是："></a>总结下就是：</h3><p>浏览器https请求连接，服务端将证书（里面有公钥）返回给浏览器，浏览器产生随机数（密钥）同时用公钥对随机数（密钥）加密。将加密后的随机数（密钥）发送给服务端。然后浏览器和服务端数据通信就用这个随机数（密钥）对称加密。</p>
<h2 id="2-__u5728tomcat_u670D_u52A1_u5668_u4E0A_u90E8_u7F72https"><a href="#2-__u5728tomcat_u670D_u52A1_u5668_u4E0A_u90E8_u7F72https" class="headerlink" title="2. 在tomcat服务器上部署https"></a>2. 在tomcat服务器上部署https</h2><h3 id="2-1__u751F_u6210_u5B89_u5168_u8BC1_u4E66"><a href="#2-1__u751F_u6210_u5B89_u5168_u8BC1_u4E66" class="headerlink" title="2.1 生成安全证书"></a>2.1 生成安全证书</h3><p>jdk为我们提供了个keytool.exe<br>生成证书的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias &#20135;&#29983;&#21035;&#21517; -keyalg &#25351;&#23450;&#23494;&#38053;&#31639;&#27861; -keystore &#23494;&#38053;&#36335;&#24452; -storepass &#23494;&#38053;&#30340;&#23494;&#30721; -keypass &#21035;&#21517;&#26465;&#30446;&#23494;&#30721;</span><br></pre></td></tr></table></figure></p>
<p>然后会出现让你输入以下信息：<br><img src="/2016/02/05/how-to-deploy-https-project/htdhp-1.jpg" alt=""></p>
<h3 id="2-2__u914D_u7F6Etomcat"><a href="#2-2__u914D_u7F6Etomcat" class="headerlink" title="2.2 配置tomcat"></a>2.2 配置tomcat</h3><p>tomcat目录下的conf/server.xml找到<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span><br><span class="line">&lt;Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"</span><br><span class="line">           maxThreads="150" SSLEnabled="true" scheme="https" secure="true"</span><br><span class="line">           clientAuth="false" sslProtocol="TLS" /&gt;</span><br><span class="line">--&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>去掉注释，修改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"8443"</span> <span class="attribute">protocol</span>=<span class="value">"org.apache.coyote.http11.Http11Protocol"</span> </span><br><span class="line">		   <span class="attribute">maxThreads</span>=<span class="value">"150"</span> <span class="attribute">SSLEnabled</span>=<span class="value">"true"</span> <span class="attribute">scheme</span>=<span class="value">"https"</span> <span class="attribute">secure</span>=<span class="value">"true"</span></span><br><span class="line">		   <span class="attribute">clientAuth</span>=<span class="value">"false"</span> <span class="attribute">sslProtocol</span>=<span class="value">"TLS"</span> </span><br><span class="line">		   <span class="attribute">keystoreFile</span>=<span class="value">"keystore文件路径"</span> </span><br><span class="line">		   <span class="attribute">keystorePass</span>=<span class="value">"密码"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>如果让http自动跳转到https请求可以顺带修改配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redirectPort="8443"</span><br></pre></td></tr></table></figure></p>
<p>将http请求重定向到https请求上。</p>
<p>接下来就可以直接通过https访问了，实际项目运用过程中。可能更多的是通过授信的第三方购买证书。（搜了一下，感觉挺贵的。小几百一年）各位有兴趣可以购买一发，部署一发！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前段时间接了个外包项目，终端IOS要求请求走https。之前https都是某同事在倒腾，没有学习理解过，查了一些资料自己做点总结。</p>
<h2 id="1-__u4F55_u4E3Ahttps"><a href="#1-__u4F55_u4E3Ahttps" class]]>
    </summary>
    
      <category term="tomcat" scheme="http://bensonzc.github.io/tags/tomcat/"/>
    
      <category term="部署" scheme="http://bensonzc.github.io/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
</feed>
